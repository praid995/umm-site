# Правила разработки проекта УРАЛМЕТАЛЛОМАРКЕТ

## 1. Общие правила

### 1.1 Документация
- Обязательное обновление документации при внесении изменений
- Следование форматам документации, описанным в Project.md
- Актуализация API документации при изменении endpoints

### 1.2 Код
- Следование принципам Clean Code
- Использование TypeScript для типизации
- Обязательное покрытие тестами нового кода
- Следование архитектурным паттернам из Project.md

### 1.3 Git
- Использование Conventional Commits
- Создание отдельной ветки для каждой задачи
- Обязательный code review перед мержем
- Запрет прямых коммитов в main

## 2. Безопасность

### 2.1 Данные
- Не хранить чувствительные данные в коде
- Использовать переменные окружения для конфигурации
- Шифровать все персональные данные
- Регулярный аудит безопасности

### 2.2 API
- Валидация всех входных данных
- Rate limiting для публичных endpoints
- Использование HTTPS
- Проверка авторизации для защищенных endpoints

## 3. Производительность

### 3.1 Frontend
- Оптимизация изображений
- Lazy loading для тяжелого контента
- Минимизация бандла
- Кеширование статического контента

### 3.2 Backend
- Кеширование частых запросов
- Оптимизация запросов к БД
- Мониторинг производительности
- Масштабирование при необходимости

## 4. Качество кода

### 4.1 Линтинг
```json
{
  "extends": [
    "next/core-web-vitals",
    "prettier"
  ],
  "rules": {
    "no-unused-vars": "error",
    "no-console": "warn",
    "prefer-const": "error"
  }
}
```

### 4.2 Prettier
```json
{
  "semi": true,
  "trailingComma": "es5",
  "singleQuote": true,
  "printWidth": 80,
  "tabWidth": 2
}
```

## 5. Тестирование

### 5.1 Unit тесты
- Обязательны для бизнес-логики
- Изолированное тестирование компонентов
- Моки для внешних зависимостей
- Покрытие > 80%

### 5.2 E2E тесты
- Критические пользовательские сценарии
- Тестирование в разных браузерах
- Проверка респонсивности
- Тестирование производительности

## 6. Деплой

### 6.1 Окружения
- development
- staging
- production

### 6.2 CI/CD
- Автоматические тесты
- Линтинг
- Сборка
- Деплой по окружениям

## 7. Мониторинг

### 7.1 Логирование
- Структурированные логи
- Уровни логирования
- Централизованное хранение
- Алерты по критическим ошибкам

### 7.2 Метрики
- Время ответа API
- Загрузка ресурсов
- Ошибки пользователей
- Бизнес-метрики

---
*Последнее обновление: 2024-03-19*